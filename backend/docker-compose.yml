# SkillMatch AI - Docker Compose for Development

version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: skillmatch_postgres
    environment:
      POSTGRES_DB: skillmatch_ai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migration.sql:/docker-entrypoint-initdb.d/migration.sql
    networks:
      - skillmatch_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: skillmatch_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - skillmatch_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  backend:
    build: .
    container_name: skillmatch_backend
    environment:
      DATABASE_URL: postgresql+asyncpg://postgres:password@postgres:5432/skillmatch_ai
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET_KEY: dev-secret-key-change-in-production
      DEBUG: "True"
      ENVIRONMENT: development
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - /app/.venv  # Exclude virtual environment
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - skillmatch_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  skillmatch_network:
    driver: bridge
